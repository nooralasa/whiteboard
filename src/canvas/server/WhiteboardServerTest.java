package canvas.server;

import static org.junit.Assert.*;

import java.io.IOException;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;

import org.junit.Test;

/**
 * WhiteboardServer Test runs the JUnit tests for the Whiteboard Server class. All components that do not require sockets are tested.
 *
 */
public class WhiteboardServerTest {
    /**
     * TESTING createBoards
     * Asserts that Board1, Board2, and Board3 are created.
     */
    @Test
    public void createBoardsTest() throws IOException{
        WhiteboardServer whiteboardServer = new WhiteboardServer();
        whiteboardServer.createBoards();
        assertEquals(whiteboardServer.whiteboardToCommandsMap.size(), 3);
        assertEquals(whiteboardServer.whiteboardToCommandsMap.containsKey("Board1"), true);
        assertEquals(whiteboardServer.whiteboardToCommandsMap.containsKey("Board2"), true);
        assertEquals(whiteboardServer.whiteboardToCommandsMap.containsKey("Board3"), true);
    }

    /**
     * TESTING handleRequest (all commands that create a relatively short stream of commands, longer ones are manually tested)
     * (and getExistingWhiteboardsAll, getExistingWhiteboardsOne with the addBoard and newUsername commands)
     * (and getSameUsersWhiteboard with the selectBoard command)
     * Partition the input space as follows:
     * Input: new username (doesn't exist), new username exists, addBoard whiteboard exists, addBoard whiteboard doesn't exist
     *        selectBoard with no user, selectBoard with no board, selectBoard with history and other user
     *        command in regex but no specified action, command not in regular expression
     * 
     * @throws InterruptedException 
     */
    @Test
    public void newUsernameNonExist() throws IOException, InterruptedException{
        WhiteboardServer whiteboardServer = new WhiteboardServer();
        BlockingQueue<String> blockingQueue = new ArrayBlockingQueue<String>(100000);
        whiteboardServer.commandQueues.add(blockingQueue); // Normally generated by method running network connections
        Integer threadNum = 0;
        whiteboardServer.handleRequest("new username bob", threadNum);

        String one = whiteboardServer.commandQueues.get(threadNum).take();
        String two = whiteboardServer.commandQueues.get(threadNum).take();
        String three = whiteboardServer.commandQueues.get(threadNum).take();
        String four = whiteboardServer.commandQueues.get(threadNum).take();
        String five = whiteboardServer.commandQueues.get(threadNum).take();

        assertEquals(one.substring(0,21).equals("Existing Whiteboards "), true);
        assertEquals(two.substring(0,21).equals("Existing Whiteboards "), true);
        assertEquals(three.substring(0,21).equals("Existing Whiteboards "), true);
        assertEquals(four.substring(0,29).equals("Done sending whiteboard names"), true);
        assertEquals(five.substring(0,19).equals("Select a whiteboard"), true);
        assertEquals(whiteboardServer.clientToWhiteboardMap.get("bob"), "");
        assertEquals(whiteboardServer.clientToThreadNumMap.get("bob"), threadNum);
    }

    @Test
    public void newUsernameExists() throws IOException, InterruptedException{
        WhiteboardServer whiteboardServer = new WhiteboardServer();
        BlockingQueue<String> blockingQueue = new ArrayBlockingQueue<String>(100000);
        whiteboardServer.commandQueues.add(blockingQueue); // Normally generated by method running network connections
        whiteboardServer.commandQueues.add(blockingQueue); // Normally generated by method running network connections
        Integer threadNum = 0;
        Integer threadNum2 = 1;
        whiteboardServer.handleRequest("new username bob", threadNum);
        whiteboardServer.handleRequest("new username bob", threadNum2);

        String one = whiteboardServer.commandQueues.get(threadNum).take();
        String two = whiteboardServer.commandQueues.get(threadNum).take();
        String three = whiteboardServer.commandQueues.get(threadNum).take();
        String four = whiteboardServer.commandQueues.get(threadNum).take();
        String five = whiteboardServer.commandQueues.get(threadNum).take();

        assertEquals(one.substring(0,21).equals("Existing Whiteboards "), true);
        assertEquals(two.substring(0,21).equals("Existing Whiteboards "), true);
        assertEquals(three.substring(0,21).equals("Existing Whiteboards "), true);
        assertEquals(four.substring(0,29).equals("Done sending whiteboard names"), true);
        assertEquals(five.substring(0,19).equals("Select a whiteboard"), true);
        assertEquals(whiteboardServer.clientToWhiteboardMap.get("bob"), "");
        assertEquals(whiteboardServer.clientToThreadNumMap.get("bob"), threadNum);
        String six = whiteboardServer.commandQueues.get(threadNum2).take();
        assertEquals(six.substring(0,53).equals("Username already taken. Please select a new username."), true);
    }

    @Test
    public void addBoardNonExist() throws IOException, InterruptedException{
        WhiteboardServer whiteboardServer = new WhiteboardServer();
        BlockingQueue<String> blockingQueue = new ArrayBlockingQueue<String>(100000);
        whiteboardServer.commandQueues.add(blockingQueue); // Normally generated by method running network connections
        Integer threadNum = 0;
        whiteboardServer.handleRequest("addBoard test", threadNum);

        String one = whiteboardServer.commandQueues.get(threadNum).take();
        String two = whiteboardServer.commandQueues.get(threadNum).take();
        String three = whiteboardServer.commandQueues.get(threadNum).take();
        String four = whiteboardServer.commandQueues.get(threadNum).take();
        String five = whiteboardServer.commandQueues.get(threadNum).take();
        String six = whiteboardServer.commandQueues.get(threadNum).take();

        assertEquals(one.substring(0,16).equals("Board test added"), true);
        assertEquals(two.substring(0,21).equals("Existing Whiteboards "), true);
        assertEquals(three.substring(0,21).equals("Existing Whiteboards "), true);
        assertEquals(four.substring(0,21).equals("Existing Whiteboards "), true);
        assertEquals(five.substring(0,21).equals("Existing Whiteboards "), true);
        assertEquals(six.substring(0,29).equals("Done sending whiteboard names"), true);
    }

    @Test
    public void addBoardExists() throws IOException, InterruptedException{
        WhiteboardServer whiteboardServer = new WhiteboardServer();
        BlockingQueue<String> blockingQueue = new ArrayBlockingQueue<String>(100000);
        whiteboardServer.commandQueues.add(blockingQueue); // Normally generated by method running network connections
        Integer threadNum = 0;
        whiteboardServer.handleRequest("addBoard test", threadNum);
        whiteboardServer.handleRequest("addBoard test", threadNum);

        String one = whiteboardServer.commandQueues.get(threadNum).take();
        String two = whiteboardServer.commandQueues.get(threadNum).take();
        String three = whiteboardServer.commandQueues.get(threadNum).take();
        String four = whiteboardServer.commandQueues.get(threadNum).take();
        String five = whiteboardServer.commandQueues.get(threadNum).take();
        String six = whiteboardServer.commandQueues.get(threadNum).take();
        String seven = whiteboardServer.commandQueues.get(threadNum).take();
        String eight = whiteboardServer.commandQueues.get(threadNum).take();
        String nine = whiteboardServer.commandQueues.get(threadNum).take();
        String ten = whiteboardServer.commandQueues.get(threadNum).take();
        String eleven = whiteboardServer.commandQueues.get(threadNum).take();
        String twelve = whiteboardServer.commandQueues.get(threadNum).take();

        assertEquals(one.substring(0,16).equals("Board test added"), true);
        assertEquals(two.substring(0,21).equals("Existing Whiteboards "), true);
        assertEquals(three.substring(0,21).equals("Existing Whiteboards "), true);
        assertEquals(four.substring(0,21).equals("Existing Whiteboards "), true);
        assertEquals(five.substring(0,21).equals("Existing Whiteboards "), true);
        assertEquals(six.substring(0,29).equals("Done sending whiteboard names"), true);
        assertEquals(seven.substring(0,26).equals("Whiteboard already exists."), true);
        assertEquals(eight.substring(0,21).equals("Existing Whiteboards "), true);
        assertEquals(nine.substring(0,21).equals("Existing Whiteboards "), true);
        assertEquals(ten.substring(0,21).equals("Existing Whiteboards "), true);
        assertEquals(eleven.substring(0,21).equals("Existing Whiteboards "), true);
        assertEquals(twelve.substring(0,29).equals("Done sending whiteboard names"), true);
    }


    @Test
    public void selectBoardNoUser() throws IOException, InterruptedException{
        WhiteboardServer whiteboardServer = new WhiteboardServer();
        BlockingQueue<String> blockingQueue = new ArrayBlockingQueue<String>(100000);
        whiteboardServer.commandQueues.add(blockingQueue); // Normally generated by method running network connections
        Integer threadNum = 0;
        whiteboardServer.handleRequest("addBoard test", threadNum);
        whiteboardServer.handleRequest("bob selectBoard test", threadNum);

        String one = whiteboardServer.commandQueues.get(threadNum).take();
        String two = whiteboardServer.commandQueues.get(threadNum).take();
        String three = whiteboardServer.commandQueues.get(threadNum).take();
        String four = whiteboardServer.commandQueues.get(threadNum).take();
        String five = whiteboardServer.commandQueues.get(threadNum).take();
        String six = whiteboardServer.commandQueues.get(threadNum).take();
        String seven = whiteboardServer.commandQueues.get(threadNum).take();

        assertEquals(one.substring(0,16).equals("Board test added"), true);
        assertEquals(two.substring(0,21).equals("Existing Whiteboards "), true);
        assertEquals(three.substring(0,21).equals("Existing Whiteboards "), true);
        assertEquals(four.substring(0,21).equals("Existing Whiteboards "), true);
        assertEquals(five.substring(0,21).equals("Existing Whiteboards "), true);
        assertEquals(six.substring(0,29).equals("Done sending whiteboard names"), true);
        assertEquals(seven.substring(0,24).equals("Username does not exist."), true);
    }


    @Test
    public void selectBoardNoBoard() throws IOException, InterruptedException{
        WhiteboardServer whiteboardServer = new WhiteboardServer();
        BlockingQueue<String> blockingQueue = new ArrayBlockingQueue<String>(100000);
        whiteboardServer.commandQueues.add(blockingQueue); // Normally generated by method running network connections
        Integer threadNum = 0;
        whiteboardServer.handleRequest("new username bob", threadNum);
        whiteboardServer.handleRequest("bob selectBoard test", threadNum);

        String one = whiteboardServer.commandQueues.get(threadNum).take();
        String two = whiteboardServer.commandQueues.get(threadNum).take();
        String three = whiteboardServer.commandQueues.get(threadNum).take();
        String four = whiteboardServer.commandQueues.get(threadNum).take();
        String five = whiteboardServer.commandQueues.get(threadNum).take();
        String six = whiteboardServer.commandQueues.get(threadNum).take();

        assertEquals(one.substring(0,21).equals("Existing Whiteboards "), true);
        assertEquals(two.substring(0,21).equals("Existing Whiteboards "), true);
        assertEquals(three.substring(0,21).equals("Existing Whiteboards "), true);
        assertEquals(four.substring(0,29).equals("Done sending whiteboard names"), true);
        assertEquals(five.substring(0,19).equals("Select a whiteboard"), true);
        assertEquals(six.substring(0,68).equals("Whiteboard does not exist. Select a different board or make a board."), true);
    }
}
